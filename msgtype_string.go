// Code generated by "stringer -type MsgType"; DO NOT EDIT.

package smftool

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MTSequenceNumber-0]
	_ = x[MTText-1]
	_ = x[MTCopyrightNotice-2]
	_ = x[MTSequenceTrackName-3]
	_ = x[MTInstrumentName-4]
	_ = x[MTLyric-5]
	_ = x[MTMarker-6]
	_ = x[MTCuePoint-7]
	_ = x[MTChannelPrefix-32]
	_ = x[MTEOT-47]
	_ = x[MTSetTempo-81]
	_ = x[MTSMPTEOffset-84]
	_ = x[MTTimeSignature-88]
	_ = x[MTKeySignature-89]
	_ = x[MTSequencerSpecific-127]
	_ = x[MTSysEx-240]
	_ = x[MTSpecialSysEx-247]
	_ = x[MTNoteOff-128]
	_ = x[MTNoteOn-144]
	_ = x[MTKeyPressure-160]
	_ = x[MTController-176]
	_ = x[MTProgramChange-192]
	_ = x[MTChannelPressure-208]
	_ = x[MTPitchBend-224]
}

const _MsgType_name = "MTSequenceNumberMTTextMTCopyrightNoticeMTSequenceTrackNameMTInstrumentNameMTLyricMTMarkerMTCuePointMTChannelPrefixMTEOTMTSetTempoMTSMPTEOffsetMTTimeSignatureMTKeySignatureMTSequencerSpecificMTNoteOffMTNoteOnMTKeyPressureMTControllerMTProgramChangeMTChannelPressureMTPitchBendMTSysExMTSpecialSysEx"

var _MsgType_map = map[MsgType]string{
	0:   _MsgType_name[0:16],
	1:   _MsgType_name[16:22],
	2:   _MsgType_name[22:39],
	3:   _MsgType_name[39:58],
	4:   _MsgType_name[58:74],
	5:   _MsgType_name[74:81],
	6:   _MsgType_name[81:89],
	7:   _MsgType_name[89:99],
	32:  _MsgType_name[99:114],
	47:  _MsgType_name[114:119],
	81:  _MsgType_name[119:129],
	84:  _MsgType_name[129:142],
	88:  _MsgType_name[142:157],
	89:  _MsgType_name[157:171],
	127: _MsgType_name[171:190],
	128: _MsgType_name[190:199],
	144: _MsgType_name[199:207],
	160: _MsgType_name[207:220],
	176: _MsgType_name[220:232],
	192: _MsgType_name[232:247],
	208: _MsgType_name[247:264],
	224: _MsgType_name[264:275],
	240: _MsgType_name[275:282],
	247: _MsgType_name[282:296],
}

func (i MsgType) String() string {
	if str, ok := _MsgType_map[i]; ok {
		return str
	}
	return "MsgType(" + strconv.FormatInt(int64(i), 10) + ")"
}
